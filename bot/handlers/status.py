from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from database.db_services import get_users_files, get_file_chunks
from database.models import FileSummary

router = Router()

@router.message(Command("status"))
async def status_handler(message: Message, session: AsyncSession):
    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_files = await get_users_files(user_id=user_id, session=session)
    if not user_files:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    status_msg = ""
    for user_file in user_files:
        title = user_file.title or user_file.file_id
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏
        chunks = await get_file_chunks(user_file.file_id, session=session)
        total = len(chunks)
        if total == 0:
            status = "‚ùî –ù–µ —Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)"
        else:
            done = sum(1 for c in chunks if c.processed)
            if done == 0:
                status = "‚è≥ –ñ–¥—ë—Ç –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"
            elif 0 < done < total:
                status = f"üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ ({done}/{total} –±–ª–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ summary
                summary = getattr(user_file, "summary", None)
                if summary and summary.summary:
                    status = "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω"
                else:
                    status = "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω (–æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è)"
        status_msg += f"üìÑ <b>{title}</b>\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –ø–æ–∫–∞–∂–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç summary
        if getattr(user_file, "summary", None) and user_file.summary and user_file.summary.summary:
            short_report = user_file.summary.summary[:500]
            status_msg += f"üìù –§—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç—á—ë—Ç–∞:\n{short_report}...\n\n"

    await message.answer(
        status_msg if status_msg else "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
        parse_mode="HTML"
    )
